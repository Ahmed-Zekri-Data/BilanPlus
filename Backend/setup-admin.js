const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const config = require('./Config/db.json');
const Utilisateur = require('./Models/Utilisateur');
const Role = require('./Models/Role');

async function setupAdmin() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(config.url);
    console.log('‚úÖ Connect√© √† MongoDB');

    // 1. Cr√©er un r√¥le administrateur
    console.log('\n1. Cr√©ation du r√¥le administrateur...');

    // Supprimer l'ancien r√¥le s'il existe
    await Role.deleteOne({ nom: 'Administrateur Syst√®me' });

    const adminRole = new Role({
      nom: 'Administrateur Syst√®me',
      description: 'Acc√®s complet au syst√®me',
      permissions: {
        gererUtilisateursEtRoles: true,
        consulterTableauBord: true,
        gererComptes: true,
        accesComplet: true
      },
      actif: true
    });

    await adminRole.save();
    console.log('‚úÖ R√¥le administrateur cr√©√© avec ID:', adminRole._id);

    // 2. Cr√©er un utilisateur administrateur
    console.log('\n2. Cr√©ation de l\'utilisateur administrateur...');

    // Supprimer l'ancien utilisateur s'il existe
    await Utilisateur.deleteOne({ email: 'admin@bilanplus.com' });

    // Hacher le mot de passe
    const hashedPassword = await bcrypt.hash('admin123', 10);

    const adminUser = new Utilisateur({
      nom: 'Admin',
      prenom: 'Syst√®me',
      email: 'admin@bilanplus.com',
      password: hashedPassword,
      role: adminRole._id,
      telephone: '0000000000',
      adresse: 'Syst√®me',
      actif: true,
      dateCreation: new Date()
    });

    await adminUser.save();
    console.log('‚úÖ Utilisateur administrateur cr√©√©');
    console.log('Email: admin@bilanplus.com');
    console.log('Mot de passe: admin123');

    // 3. Cr√©er un r√¥le utilisateur standard
    console.log('\n3. Cr√©ation du r√¥le utilisateur standard...');

    await Role.deleteOne({ nom: 'Utilisateur Standard' });

    const userRole = new Role({
      nom: 'Utilisateur Standard',
      description: 'Utilisateur avec permissions de base',
      permissions: {
        gererUtilisateursEtRoles: false,
        consulterTableauBord: true,
        gererComptes: false,
        accesComplet: false
      },
      actif: true
    });

    await userRole.save();
    console.log('‚úÖ R√¥le utilisateur standard cr√©√© avec ID:', userRole._id);

    // 4. Mettre √† jour l'utilisateur existant myriammoncer42@gmail.com
    console.log('\n4. Mise √† jour de l\'utilisateur existant...');

    const existingUser = await Utilisateur.findOne({ email: 'myriammoncer42@gmail.com' });
    if (existingUser) {
      // Mettre √† jour le mot de passe et le r√¥le
      existingUser.password = await bcrypt.hash('password123', 10);
      existingUser.role = adminRole._id;
      existingUser.actif = true;
      await existingUser.save();
      console.log('‚úÖ Utilisateur myriammoncer42@gmail.com mis √† jour');
      console.log('Nouveau mot de passe: password123');
    } else {
      console.log('‚ö†Ô∏è Utilisateur myriammoncer42@gmail.com non trouv√©');
    }

    // 5. Afficher un r√©sum√©
    console.log('\nüìã R√©sum√© de la configuration:');
    console.log('');
    console.log('üîë Comptes administrateur:');
    console.log('  - admin@bilanplus.com / admin123');
    console.log('  - myriammoncer42@gmail.com / password123');
    console.log('');
    console.log('üé≠ R√¥les cr√©√©s:');
    console.log('  - Administrateur Syst√®me (toutes permissions)');
    console.log('  - Utilisateur Standard (permissions limit√©es)');
    console.log('');
    console.log('‚úÖ Configuration termin√©e! Vous pouvez maintenant:');
    console.log('  1. D√©marrer le backend: node app.js');
    console.log('  2. Vous connecter avec un des comptes admin');
    console.log('  3. Cr√©er des utilisateurs et des r√¥les');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nD√©connect√© de MongoDB');
  }
}

setupAdmin();
