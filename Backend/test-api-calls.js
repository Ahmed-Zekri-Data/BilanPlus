const axios = require('axios');

async function testAPICalls() {
  try {
    console.log('üß™ Test des appels API...');
    
    // 1. Se connecter
    console.log('\n1. Connexion...');
    const loginResponse = await axios.post('http://localhost:3000/user/login', {
      email: 'myriammoncer42@gmail.com',
      password: 'password123'
    });
    
    const token = loginResponse.data.token;
    console.log('‚úÖ Connect√©, token obtenu');
    
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
    
    // 2. Tester la r√©cup√©ration des r√¥les
    console.log('\n2. Test r√©cup√©ration des r√¥les...');
    try {
      const rolesResponse = await axios.get('http://localhost:3000/roles', { headers });
      console.log(`‚úÖ R√¥les r√©cup√©r√©s: ${rolesResponse.data.length} r√¥les`);
      console.log('Premier r√¥le:', rolesResponse.data[0]?.nom);
    } catch (error) {
      console.log('‚ùå Erreur r√©cup√©ration r√¥les:', error.response?.data?.message || error.message);
    }
    
    // 3. Tester la cr√©ation d'un r√¥le
    console.log('\n3. Test cr√©ation d\'un r√¥le...');
    const roleData = {
      nom: `Test Role ${Date.now()}`,
      description: 'R√¥le de test cr√©√© par script',
      permissions: {
        gererUtilisateursEtRoles: false,
        consulterTableauBord: true,
        gererComptes: false
      },
      actif: true
    };
    
    try {
      const createRoleResponse = await axios.post('http://localhost:3000/roles', roleData, { headers });
      console.log('‚úÖ R√¥le cr√©√© avec succ√®s');
      console.log('ID du nouveau r√¥le:', createRoleResponse.data.role._id);
    } catch (error) {
      console.log('‚ùå Erreur cr√©ation r√¥le:', error.response?.data?.message || error.message);
      console.log('Status:', error.response?.status);
      console.log('Data:', error.response?.data);
    }
    
    // 4. Tester la cr√©ation d'un utilisateur
    console.log('\n4. Test cr√©ation d\'un utilisateur...');
    
    // D'abord r√©cup√©rer un r√¥le existant
    const rolesForUser = await axios.get('http://localhost:3000/roles', { headers });
    const firstRole = rolesForUser.data[0];
    
    if (firstRole) {
      const userData = {
        nom: 'Test',
        prenom: 'Utilisateur',
        email: `test.user.${Date.now()}@example.com`,
        password: 'password123',
        role: firstRole._id,
        telephone: '0123456789',
        adresse: '123 Rue Test'
      };
      
      try {
        const createUserResponse = await axios.post('http://localhost:3000/user/add', userData, { headers });
        console.log('‚úÖ Utilisateur cr√©√© avec succ√®s');
        console.log('ID du nouvel utilisateur:', createUserResponse.data.utilisateur._id);
      } catch (error) {
        console.log('‚ùå Erreur cr√©ation utilisateur:', error.response?.data?.message || error.message);
        console.log('Status:', error.response?.status);
        console.log('Data:', error.response?.data);
      }
    } else {
      console.log('‚ùå Aucun r√¥le disponible pour cr√©er un utilisateur');
    }
    
    // 5. Tester la r√©cup√©ration des utilisateurs
    console.log('\n5. Test r√©cup√©ration des utilisateurs...');
    try {
      const usersResponse = await axios.get('http://localhost:3000/user/getall', { headers });
      console.log(`‚úÖ Utilisateurs r√©cup√©r√©s: ${usersResponse.data.utilisateurs.length} utilisateurs`);
    } catch (error) {
      console.log('‚ùå Erreur r√©cup√©ration utilisateurs:', error.response?.data?.message || error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.response?.data?.message || error.message);
  }
}

testAPICalls();
